# -*- coding: utf-8 -*-

"""
   DigitalNewzealandLib.Controllers.MetadataController

   This file was automatically generated by APIMATIC BETA v2.0 on 07/12/2016
"""
import unirest

from DigitalNewzealandLib.APIHelper import APIHelper
from DigitalNewzealandLib.Configuration import Configuration
from DigitalNewzealandLib.APIException import APIException
from DigitalNewzealandLib.Models.CollectionSearchRecords import CollectionSearchRecords


class MetadataController(object):


    """A Controller to access Endpoints in the DigitalNewzealandLib API."""

    def __init__(self,
                 api_key):
        """
        Constructor with authentication and configuration parameters
        """
        self.__api_key = api_key

    def get_metadata(self,
                     options=dict()):
        """Does a GET request to /v3/records/{record_id}.json.

        The Get Metadata API call returns the available metadata for a
        specific item. The Get Metadata v3 request parameters and response
        format differs significantly from the depreciated Get Metadata v1 & v2
        API call.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    fields -- string -- A comma separated list of fields or
                        groups of fields to be returned for each record.
                        Possible groups include 'default' and 'verbose'. If no
                        value is specified, then the 'default' field group
                        will be returned.
                    record_id -- string -- Record IDs are identified in the
                        metadata_url field of a results set. 23034653 is an
                        example record ID.

        Returns:
            CollectionSearchRecords: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/v3/records/{record_id}.json"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "record_id": options.get('record_id', None)
        })

        # Process optional query parameters
        query_parameters = {
            "fields": options.get('fields', None),
            "api_key": self.__api_key
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CollectionSearchRecords(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)
