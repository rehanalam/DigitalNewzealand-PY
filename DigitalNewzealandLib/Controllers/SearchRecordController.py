# -*- coding: utf-8 -*-

"""
   DigitalNewzealandLib.Controllers.SearchRecordController

   This file was automatically generated by APIMATIC BETA v2.0 on 06/07/2016
"""
import unirest

from DigitalNewzealandLib.APIHelper import APIHelper
from DigitalNewzealandLib.Configuration import Configuration
from DigitalNewzealandLib.APIException import APIException
from DigitalNewzealandLib.Models.CollectionSearchRecords import CollectionSearchRecords


class SearchRecordController(object):


    """A Controller to access Endpoints in the DigitalNewzealandLib API."""

    def __init__(self,
                 api_key):
        """
        Constructor with authentication and configuration parameters
        """
        self.__api_key = api_key

    def search_record(self,
                      options=dict()):
        """Does a GET request to /v3/records.json.

        The Search Records API call returns a result set in response to a
        search query. The v3 Search Records API request parameters and
        response format differs significantly from the deprecated v1 & v2
        Search Records API call.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    text -- string -- TODO: type description here.
                    mand -- string -- Restricts search to records matching all
                        facet values. Example:
                        "&and[content_partner][]=Kete+Horowhenua&and[category][
                        ]=Images"
                    direction -- string --  the direction in which the results
                        are sorted. Possible values: "desc", "asc".
                    facet_per_page -- int -- the number of facets returned for
                        every page. (Defaults to 10.)
                    facets -- string -- a list of facet fields to include in
                        the output. See the note on facets below for more
                        information. Example: "&facets=year,category"
                    facets_page -- int -- the facet page to iterate over a set
                        of facets. . (Defaults to 1.)
                    geo_bbox -- double -- a geographic bounding box scoping a
                        search to a geographic region. Order of
                        latitude-longitude coordinates is north, west, south,
                        east. For example, &geo_bbox=-41,174,-42,175 searches
                        the Wellington region.
                    mor -- string -- Restricts search to records matching any
                        of the specified facet values. Example:
                        "&or[category][]=Image&or[category][]=Videos"without 
                    page -- int -- the page when iterating over a set of
                        records. (Defaults to 1.)
                    per_page -- int -- the number of records the user wishes
                        returned up to a maximum of 100. (Defaults to 20.)
                    sort -- string -- the field upon which results are sorted.
                        Defaults to relevance sorting. The sort field must be
                        one of: "category", "content_partner", "date",
                        "syndication_date".
                    without -- string -- Restricts search to records that
                        don't match any of the facet values. Example:
                        "&without[category][]=Newspapers"

        Returns:
            CollectionSearchRecords: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/v3/records.json"

        # Process optional query parameters
        query_parameters = {
            "text": options.get('text', None),
            "and": options.get('mand', None),
            "direction": options.get('direction', None),
            "facet_per_page":  options.get('facet_per_page', None) if options.get('facet_per_page', None) is not None else 10,
            "facets": options.get('facets', None),
            "facets_page":  options.get('facets_page', None) if options.get('facets_page', None) is not None else 1,
            "geo_bbox": options.get('geo_bbox', None),
            "or": options.get('mor', None),
            "page":  options.get('page', None) if options.get('page', None) is not None else 1,
            "per_page":  options.get('per_page', None) if options.get('per_page', None) is not None else 20,
            "sort": options.get('sort', None),
            "without": options.get('without', None),
            "api_key": self.__api_key
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        # Try to cast response to desired type
        if isinstance(response.body, dict):
            # Response is already in a dictionary, return the object 
            try:
                return CollectionSearchRecords(**response.body)
            except TypeError:
                raise APIException("Invalid JSON returned", response.code, response.body)
        
        # If we got here then an error occured while trying to parse the response
        raise APIException("Invalid JSON returned", response.code, response.body)
