# -*- coding: utf-8 -*-

"""
   DigitalNewzealandLib.Models.ResultsCollection
 
   This file was automatically generated by APIMATIC BETA v2.0 on 06/07/2016
"""
from DigitalNewzealandLib.APIHelper import APIHelper

class ResultsCollection(object):

    """Implementation of the 'ResultsCollection' model.

    Results collection 

    Attributes:
        is_commercial_use (bool): this record is licensed for commercial use
        category (string): a string containing one or more category names
            separated by a comma (e.g. Images, Web pages)
        content_partner (string): the institution holding the content to which
            the record refers
        date (double): a date associated with the record (e.g.
            1996-01-01T00:00:00.000Z). This field may be empty
        description (string): text describing the record
        additional_description (string): additional text describing the
            record
        landing_url (string):  the url for the content on the contentpartner's
            website. Please use the source_url when providing HTML links (see
            below)
        id (string): the internal DigitalNZ identifier (used by the Get
            Metadata API)
        source_url (string): the url that will redirect users to the
            landing_url. By using this link (as opposed to the display_url) we
            are able to count clickthroughs which is helpful for demonstrating
            the value of DigitalNZ
        syndication_date (string): the date the record was added to DigitalNZ
        thumbnail_url (string): the url of for a thumbnail image of the
            content to which the record refers. This field may be empty.
        title (string): the title of the record
        geo_co_ords (string): The latitude and longitude in the following
            format: namespace:lat,long; Multiple values are seperated by
            semi-colons, for example:
            namespace:lat,long;namespace:lat,long;namespace:lat,long; NOTE:
            namespace is optional.
        large_thumbnail_url (string): a larger thumbnail image with dimensions
            up to 800px (NB the API Terms do not extend rights to the use of
            these thumbnails)
        copyright (string): the copyright statement applying to the object.
            This field may be empty.
        license (string): the licence for the object. This field may be empty
        rights_url (string): the url of the object licence. This field may be
            empty.
        display_date (string): string with date information in multiple, often
            unstructured formats (e.g. Circa 2000)
        peer_reviewed (bool): boolean, associated with research paper items.
            True indicates the research paper has been peer reviewed
        marsden_code (int): a number indicating the field of research
        author (string): lists the author's names
        no_landing_page (bool): boolean value, if set to true it indicates the
            item doesn't have an external landing page, usually because it is
            a downloadable item such as a pdf or mpeg
        object_url (string): a url pointing to a downloadable object, i.e. an
            image, pdf or mpeg
        published_date (string): list of dates published 
        publisher (string): lists the publisher's names
        dctype (string):  Dublin Core categorisation indicating type
        library_collection (string): the library collection the item belongs
            to
        display_collection (string): the display collection the item belongs
            to
        collection_parent (string): the item's parent collection
        collection_root (string): the top level collection

    """

    def __init__(self,
                 **kwargs):
        """Constructor for the ResultsCollection class
        
        Args:
            **kwargs: Keyword Arguments in order to initialise the
                object. Any of the attributes in this object are able to
                be set through the **kwargs of the constructor. The values
                that can be supplied and their types are as follows::

                    is_commercial_use  -- bool -- Sets the attribute is_commercial_use
                    category -- string -- Sets the attribute category
                    content_partner -- string -- Sets the attribute content_partner
                    date -- double -- Sets the attribute date
                    description -- string -- Sets the attribute description
                    additional_description -- string -- Sets the attribute additional_description
                    landing_url -- string -- Sets the attribute landing_url
                    id -- string -- Sets the attribute id
                    source_url -- string -- Sets the attribute source_url
                    syndication_date -- string -- Sets the attribute syndication_date
                    thumbnail_url -- string -- Sets the attribute thumbnail_url
                    title -- string -- Sets the attribute title
                    geo_co_ords -- string -- Sets the attribute geo_co_ords
                    large_thumbnail_url -- string -- Sets the attribute large_thumbnail_url
                    copyright -- string -- Sets the attribute copyright
                    license -- string -- Sets the attribute license
                    rights_url -- string -- Sets the attribute rights_url
                    display_date -- string -- Sets the attribute display_date
                    peer_reviewed -- bool -- Sets the attribute peer_reviewed
                    marsden_code -- int -- Sets the attribute marsden_code
                    author -- string -- Sets the attribute author
                    no_landing_page -- bool -- Sets the attribute no_landing_page
                    object_url -- string -- Sets the attribute object_url
                    published_date -- string -- Sets the attribute published_date
                    publisher -- string -- Sets the attribute publisher
                    dctype -- string -- Sets the attribute dctype
                    library_collection -- string -- Sets the attribute library_collection
                    display_collection -- string -- Sets the attribute display_collection
                    collection_parent -- string -- Sets the attribute collection_parent
                    collection_root -- string -- Sets the attribute collection_root
        
        """
        # Set all of the parameters to their default values
        self.is_commercial_use = None
        self.category = None
        self.content_partner = None
        self.date = None
        self.description = None
        self.additional_description = None
        self.landing_url = None
        self.id = None
        self.source_url = None
        self.syndication_date = None
        self.thumbnail_url = None
        self.title = None
        self.geo_co_ords = None
        self.large_thumbnail_url = None
        self.copyright = None
        self.license = None
        self.rights_url = None
        self.display_date = None
        self.peer_reviewed = None
        self.marsden_code = None
        self.author = None
        self.no_landing_page = None
        self.object_url = None
        self.published_date = None
        self.publisher = None
        self.dctype = None
        self.library_collection = None
        self.display_collection = None
        self.collection_parent = None
        self.collection_root = None

        # Create a mapping from API property names to Model property names
        replace_names = {
            "is_commercial_use ": "is_commercial_use",
            "category": "category",
            "content_partner": "content_partner",
            "date": "date",
            "description": "description",
            "additional_description": "additional_description",
            "landing_url": "landing_url",
            "id": "id",
            "source_url": "source_url",
            "syndication_date": "syndication_date",
            "thumbnail_url": "thumbnail_url",
            "title": "title",
            "geo_co_ords": "geo_co_ords",
            "large_thumbnail_url": "large_thumbnail_url",
            "copyright": "copyright",
            "license": "license",
            "rights_url": "rights_url",
            "display_date": "display_date",
            "peer_reviewed": "peer_reviewed",
            "marsden_code": "marsden_code",
            "author": "author",
            "no_landing_page": "no_landing_page",
            "object_url": "object_url",
            "published_date": "published_date",
            "publisher": "publisher",
            "dctype": "dctype",
            "library_collection": "library_collection",
            "display_collection": "display_collection",
            "collection_parent": "collection_parent",
            "collection_root": "collection_root",
        }

        # Parse all of the Key-Value arguments
        if kwargs is not None:
            for key in kwargs:
                # Only add arguments that are actually part of this object
                if key in replace_names:
                    setattr(self, replace_names[key], kwargs[key])

    def resolve_names(self):
        """Creates a dictionary representation of this object.
        
        This method converts an object to a dictionary that represents the
        format that the model should be in when passed into an API Request.
        Because of this, the generated dictionary may have different
        property names to that of the model itself.
        
        Returns:
            dict: The dictionary representing the object.
        
        """
        # Create a mapping from Model property names to API property names
        replace_names = {
            "is_commercial_use": "is_commercial_use ",
            "category": "category",
            "content_partner": "content_partner",
            "date": "date",
            "description": "description",
            "additional_description": "additional_description",
            "landing_url": "landing_url",
            "id": "id",
            "source_url": "source_url",
            "syndication_date": "syndication_date",
            "thumbnail_url": "thumbnail_url",
            "title": "title",
            "geo_co_ords": "geo_co_ords",
            "large_thumbnail_url": "large_thumbnail_url",
            "copyright": "copyright",
            "license": "license",
            "rights_url": "rights_url",
            "display_date": "display_date",
            "peer_reviewed": "peer_reviewed",
            "marsden_code": "marsden_code",
            "author": "author",
            "no_landing_page": "no_landing_page",
            "object_url": "object_url",
            "published_date": "published_date",
            "publisher": "publisher",
            "dctype": "dctype",
            "library_collection": "library_collection",
            "display_collection": "display_collection",
            "collection_parent": "collection_parent",
            "collection_root": "collection_root",
        }

        retval = dict()

        return APIHelper.resolve_names(self, replace_names, retval)